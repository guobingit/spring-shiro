<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${sql.url}"/>
        <property name="username" value="${sql.username}"/>
        <property name="password" value="${sql.password}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${sql.initialSize}"/>
        <property name="minIdle" value="${sql.minIdle}"/>
        <property name="maxActive" value="${sql.maxActive}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${sql.maxWait}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${sql.timeBetweenEvictionRunsMillis}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${sql.minEvictableIdleTimeMillis}"/>

        <property name="testWhileIdle" value="${sql.testWhileIdle}"/>
        <property name="validationQuery" value="${sql.validationQuery}"/>
        <property name="testOnBorrow" value="${sql.testOnBorrow}"/>
        <property name="testOnReturn" value="${sql.testOnReturn}"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小,如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false -->
        <!-- <property name="poolPreparedStatements" value="${smas.sql.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${smas.sql.maxPoolPreparedStatementPerConnectionSize}" /> -->

        <!-- 配置监控统计拦截的filters,如果需要多个filter，用逗号隔开，内置：stat(StatFilter)、encoding(EncodingConvertFilter)、commonLogging(CommonsLogFilter)、
            log4j(Log4jFilter)、trace(TraceFilter) -->
        <property name="filters" value="${sql.filters}"/>
    </bean>

    <!-- MyBatis配置 -->
    <bean id="sqlSessionFactory" class="com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean">
        <!-- 配置数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 自动扫描 Xml 文件位置 -->
        <property name="mapperLocations" value="classpath:/mappings/*.xml"/>
        <!-- 配置 Mybatis 配置文件（可无） -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="configurationProperties">
            <props>
                <prop key="dbType">${sql.dbType}</prop>
            </props>
        </property>
        <!-- 配置包别名 -->
        <property name="typeAliasesPackage" value="com.gb.shiro.entity"/>
        <!-- 以上配置和传统 Mybatis 一致 -->

        <!-- 插件配置 -->
        <property name="plugins">
            <array>
                <!-- 分页插件配置, 参考文档分页插件部分！！ -->
                <!-- 如需要开启其他插件，可配置于此 -->
            </array>
        </property>

        <!-- MP 全局配置注入 -->
        <property name="globalConfig" ref="globalConfig"/>
    </bean>

    <!-- 自定义SQL组装-->
    <bean id="sqlInjector" class="com.baomidou.mybatisplus.mapper.AutoSqlInjector"/>
    <!-- 自定义处理器 -->
    <bean id="baseMetaObjectHandler" class="com.baomidou.mybatisplus.entity.DefaultMetaObjectHandler"/>
    <!-- 定义 MP 全局策略 -->
    <bean id="globalConfig" class="com.baomidou.mybatisplus.entity.GlobalConfiguration">
        <!-- 主键策略配置 -->
        <!-- 可选参数 AUTO->`0`("数据库ID自增") INPUT->`1`(用户输入ID")  ID_WORKER->`2`("全局唯一ID") UUID->`3`("全局唯一ID") -->
        <property name="idType" value="2"/>
        <property name="logicDeleteValue" value="1"/>
        <property name="logicNotDeleteValue" value="0"/>
        <property name="dbType" value="${sql.dbType}"/>
        <!-- 全局表为下划线命名设置 true -->
        <property name="dbColumnUnderline" value="true"/>
        <!-- 重写查询 -->
        <property name="sqlInjector" ref="sqlInjector"/>
        <!-- 公共字段填充处理器 -->
        <property name="metaObjectHandler" ref="baseMetaObjectHandler"/>
    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.gb.shiro.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>

    <!-- 热加载 -->
    <bean class="com.baomidou.mybatisplus.spring.MybatisMapperRefresh">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
        <constructor-arg name="mapperLocations" value="classpath:/mappings/*.xml"/>
        <constructor-arg name="enabled" value="true"/>
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
</beans>